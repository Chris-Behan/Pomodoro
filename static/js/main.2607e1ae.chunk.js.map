{"version":3,"sources":["assets/alarm.mp3","useInterval.js","PomodoroRatio.js","TimeEditer.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","PomodoroRatio","focusMins","breakMins","this","focusMinutes","breakMinutes","focusing","mins","moment","hour","minutes","val","TimeEditor","props","ratio","pomodoroRatio","editing","setEdit","setRatio","useState","getFocusMinutes","setFocusMins","getBreakMinutes","setBreakMins","focusError","setFocusError","breakError","setBreakError","focusErrMsg","setFocusErrMsg","breakErrMsg","setBreakErrMsg","Fade","in","Paper","TextField","error","helperText","type","defaultValue","value","onChange","e","target","label","InputProps","endAdornment","InputAdornment","position","Button","size","color","onClick","setFocus","ls","set","Timer","count","setCount","speed","setSpeed","getFocusTime","time","setTime","counter","setCounter","muteVisible","setMuteVisible","sound","Howl","src","alarm","volume","onend","formatTime","t","hours","format","handleEdit","savedFocusMins","get","savedBreakMins","document","title","seconds","getBreakTime","window","Howler","mute","play","subtract","className","getStatus","preventDefault","Zoom","Fab","aria-label","Modal","open","onClose","aria-labelledby","aria-describedby","App","theme","createMuiTheme","palette","primary","main","secondary","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2607e1ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.5a24f4cf.mp3\";","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;","import moment from \"moment\";\r\n/**\r\n * Represents a Pomodoro Ratio, which has focus minutes, break minutes,\r\n * and a state (focusing).\r\n */\r\nclass PomodoroRatio {\r\n  constructor(focusMins, breakMins) {\r\n    this.focusMinutes = focusMins;\r\n    this.breakMinutes = breakMins;\r\n    this.focusing = true;\r\n  }\r\n\r\n  /**\r\n   * Set focus minutes.\r\n   * @param {number} mins \r\n   */\r\n  setFocusMinutes(mins) {\r\n    this.focusMinutes = mins;\r\n  }\r\n\r\n  /**\r\n   * Set break minutes.\r\n   * @param {number} mins \r\n   */\r\n  setBreakMinutes(mins) {\r\n    this.breakMinutes = mins;\r\n  }\r\n\r\n  /**\r\n   * Get focus minutes.\r\n   * @return {number} Focus minutes.\r\n   */\r\n  getFocusMinutes() {\r\n    return this.focusMinutes;\r\n  }\r\n\r\n  /**\r\n   * Get break minutes.\r\n   * @return {number} Break minutes.\r\n   */\r\n  getBreakMinutes() {\r\n    return this.breakMinutes;\r\n  }\r\n\r\n  /**\r\n   * Get a new moment object whose time is set using the focus minutes.\r\n   * @return {moment} moment object representing focus time.\r\n   */\r\n  getFocusTime() {\r\n    return new moment({ hour: 0 }).minutes(this.focusMinutes);\r\n  }\r\n\r\n  /**\r\n   * Get a new moment object whose time is set using the break minutes.\r\n   * @return {moment} moment object representing break time.\r\n   */\r\n  getBreakTime() {\r\n    return new moment({ hour: 0 }).minutes(this.breakMinutes);\r\n  }\r\n\r\n  /**\r\n   * Set the focus state of the PomodoroRatio object.\r\n   * @param {boolean} val \r\n   */\r\n  setFocus(val) {\r\n    this.focusing = val;\r\n  }\r\n\r\n  /**\r\n   * Get whether or not the PomodoroRatio object is in a focused state.\r\n   * @return {boolean}\r\n   */\r\n  getFocus() {\r\n    return this.focusing;\r\n  }\r\n\r\n  /**\r\n   * Get a string representation of the focus state.\r\n   * @return {string} Focus. or Break.\r\n   */\r\n  getStatus() {\r\n    return this.focusing ? \"Focus.\" : \"Break.\";\r\n  }\r\n}\r\n\r\nexport default PomodoroRatio;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PomodoroRatio from \"./PomodoroRatio\";\r\nimport \"./App.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport ls from \"local-storage\";\r\n/**\r\n * React component for editing focus and break times.\r\n * @param {*} props\r\n */\r\nfunction TimeEditor(props) {\r\n  let ratio = props.pomodoroRatio;\r\n  const focusing = props.focusing;\r\n  const editing = props.editing;\r\n  const setEdit = props.setEdit;\r\n  const setRatio = props.setRatio;\r\n  const [focusMins, setFocusMins] = useState(ratio.getFocusMinutes());\r\n  const [breakMins, setBreakMins] = useState(ratio.getBreakMinutes());\r\n  const [focusError, setFocusError] = useState(false);\r\n  const [breakError, setBreakError] = useState(false);\r\n  const [focusErrMsg, setFocusErrMsg] = useState(\"\");\r\n  const [breakErrMsg, setBreakErrMsg] = useState(\"\");\r\n\r\n  // Validates input, setting and unsetting error text.\r\n  useEffect(() => {\r\n    if (focusMins < 1 || focusMins > 1439) {\r\n      setFocusError(true);\r\n      setFocusErrMsg(\"Invalid Input\");\r\n    }\r\n    if (breakMins < 1 || breakMins > 1439) {\r\n      setBreakError(true);\r\n      setBreakErrMsg(\"Invalid Input\");\r\n    }\r\n    if (focusMins >= 1 && focusMins <= 1439) {\r\n      setFocusError(false);\r\n      setFocusErrMsg(\"\");\r\n    }\r\n    if (breakMins >= 1 && breakMins <= 1439) {\r\n      setBreakError(false);\r\n      setBreakErrMsg(\"\");\r\n    }\r\n  }, [focusMins, breakMins]);\r\n\r\n  // Handles a change to focus minutes.\r\n  function handleFocusMinuteChange(e) {\r\n    setFocusMins(e.target.value);\r\n  }\r\n\r\n  // Handles a change to break minutes.\r\n  function handleBreakMinuteChange(e) {\r\n    setBreakMins(e.target.value);\r\n  }\r\n  // Handled edit, triggered by clicking OK.\r\n  function handleEdit(e) {\r\n    if (focusError || breakError) {\r\n      return;\r\n    }\r\n    ratio = new PomodoroRatio(focusMins, breakMins);\r\n    ratio.setFocus(focusing);\r\n    setRatio(ratio);\r\n    ls.set(\"focusMins\", focusMins);\r\n    ls.set(\"breakMins\", breakMins);\r\n    setEdit(!editing);\r\n  }\r\n\r\n  return (\r\n    <Fade in={editing}>\r\n      <Paper id=\"paper\">\r\n        <TextField\r\n          error={focusError}\r\n          helperText={focusErrMsg}\r\n          type=\"number\"\r\n          defaultValue={ratio.getFocusMinutes()}\r\n          value={focusMins}\r\n          onChange={handleFocusMinuteChange}\r\n          label=\"Focus time\"\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"start\">Mins</InputAdornment>\r\n            ),\r\n          }}\r\n        ></TextField>\r\n        <TextField\r\n          error={breakError}\r\n          helperText={breakErrMsg}\r\n          label=\"Break time\"\r\n          type=\"number\"\r\n          defaultValue={ratio.getBreakMinutes()}\r\n          value={breakMins}\r\n          onChange={handleBreakMinuteChange}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"start\">Mins</InputAdornment>\r\n            ),\r\n          }}\r\n        ></TextField>\r\n        <Button size=\"large\" color=\"secondary\" onClick={handleEdit}>\r\n          ok\r\n        </Button>\r\n      </Paper>\r\n    </Fade>\r\n  );\r\n}\r\n\r\nexport default TimeEditor;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport useInterval from \"./useInterval\";\r\nimport PomodoroRatio from \"./PomodoroRatio\";\r\nimport \"./App.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { Howl, Howler } from \"howler\";\r\nimport alarm from \"./assets/alarm.mp3\";\r\nimport TimeEditor from \"./TimeEditer\";\r\nimport ls from \"local-storage\";\r\nimport AlarmOffIcon from \"@material-ui/icons/AlarmOff\";\r\nimport Zoom from '@material-ui/core/Zoom';\r\n\r\n/**\r\n * React component for the Timer.\r\n */\r\nfunction Timer() {\r\n  const hhmmssFormat = \"H:mm:ss\";\r\n  const mmssFormat = \"mm:ss\";\r\n  const [editing, setEdit] = useState(false);\r\n  const [ratio, setRatio] = useState(new PomodoroRatio(25, 5));\r\n  const [count, setCount] = useState(0);\r\n  const [speed, setSpeed] = useState(null);\r\n  const [time, setTime] = useState(ratio.getFocusTime());\r\n  const [counter, setCounter] = useState(0);\r\n  const [muteVisible, setMuteVisible] = useState(false);\r\n\r\n  var sound = new Howl({\r\n    src: [alarm],\r\n    volume: 0.5,\r\n    onend: () => setMuteVisible(false),\r\n  });\r\n\r\n  // Effect called once upon loading the website.\r\n  useEffect(() => {\r\n    let savedFocusMins = ls.get(\"focusMins\");\r\n    let savedBreakMins = ls.get(\"breakMins\");\r\n    if (savedFocusMins !== null && savedBreakMins !== null) {\r\n      setRatio(new PomodoroRatio(savedFocusMins, savedBreakMins));\r\n    }\r\n  }, []);\r\n\r\n  // Effect used to trigger the timer when it reaches 0 and handle the state change.\r\n  useEffect(() => {\r\n    document.title = formatTime(time);\r\n    // When timer reaches 0, switch focus state and reset timer.\r\n    if (time.hours() === 0 && time.minutes() === 0 && time.seconds() === 0) {\r\n      if (ratio.focusing) {\r\n        endOfFocus();\r\n      } else {\r\n        endOfBreak();\r\n      }\r\n      handleAlarm();\r\n    }\r\n  });\r\n\r\n  // Effect used set the timer when it is not running.\r\n  useEffect(() => {\r\n    if (speed === null) {\r\n      if (ratio.focusing) {\r\n        setTime(ratio.getFocusTime());\r\n      } else {\r\n        setTime(ratio.getBreakTime());\r\n      }\r\n    }\r\n  }, [ratio]);\r\n\r\n  // Effect used to count down the timer.\r\n  useInterval(() => {\r\n    setTime(time.subtract(1, \"seconds\"));\r\n    setCount(count + 1);\r\n  }, speed);\r\n\r\n  /**\r\n   * Function called when the focus timer reaches 0.\r\n   */\r\n  function endOfFocus(){\r\n    setTime(ratio.getBreakTime());\r\n    //Set focusing to false, then set ratio to this ratio.\r\n    //Must call setRatio to update the ratio state hook.\r\n    ratio.setFocus(false);\r\n    setRatio(ratio);\r\n    setCounter(counter + 1);\r\n  }\r\n\r\n  /**\r\n   * Function called when the break timer reaches 0.\r\n   */\r\n  function endOfBreak(){\r\n    setTime(ratio.getFocusTime());\r\n    //Set fousing to true, thenset ratio to this ratio instance.\r\n    //Must call setRatio to update the ratio state hook.\r\n    ratio.setFocus(true);\r\n    setRatio(ratio);\r\n    setSpeed(null);\r\n  }\r\n\r\n  /**\r\n   * Starts the timer.\r\n   * @param {event} e\r\n   */\r\n  function startTimer(e) {\r\n    e.preventDefault();\r\n    setSpeed(1000);\r\n  }\r\n\r\n  /**\r\n   * Stops the timer.\r\n   * @param {event} e\r\n   */\r\n  function stopTimer(e) {\r\n    e.preventDefault();\r\n    setSpeed(null);\r\n  }\r\n\r\n  /**\r\n   * Resets the timer.\r\n   * @param {event} e\r\n   */\r\n  function resetTimer(e) {\r\n    e.preventDefault();\r\n    if (ratio.focusing) {\r\n      setTime(ratio.getFocusTime());\r\n    } else {\r\n      setTime(ratio.getBreakTime());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format's the moment object to a time string.\r\n   * @param {moment} t\r\n   * @return {string} string representation of the moment object.\r\n   */\r\n  function formatTime(t) {\r\n    return t.hours() < 1 ? t.format(mmssFormat) : t.format(hhmmssFormat);\r\n  }\r\n\r\n  /**\r\n   * Handles whether or not we are in an editing state.\r\n   * @param {event} e\r\n   */\r\n  function handleEdit(e) {\r\n    setEdit(!editing);\r\n  }\r\n\r\n  /**\r\n   * Function called when it is time for the alarm to sound.\r\n   */\r\n  function handleAlarm(){\r\n    window.Howler.mute(false);\r\n    setMuteVisible(true);\r\n    sound.play();\r\n  }\r\n\r\n  /**\r\n   * Function triggered when the mute button is clicked.\r\n   */\r\n  function stopAlarm(e){\r\n    e.preventDefault();\r\n    window.Howler.mute(true);\r\n    setMuteVisible(false);\r\n  }\r\n  \r\n \r\n\r\n  return (\r\n    <div className=\"Container\">\r\n      <div className=\"TimerContainer\">\r\n        <div>{ratio.getStatus()}</div>\r\n        <div>{formatTime(time)}</div>\r\n        <div id=\"counter\">Pomodoros: {counter}</div>\r\n        <div className=\"TimerButtons\">\r\n          <Button size=\"large\" color=\"primary\" onClick={startTimer}>\r\n            Start\r\n          </Button>\r\n          <Button size=\"large\" color=\"secondary\" onClick={stopTimer}>\r\n            Stop\r\n          </Button>\r\n          <Button size=\"large\" color=\"inherit\" onClick={resetTimer}>\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <Zoom in={muteVisible}>\r\n      <Fab id=\"snooze\" onClick={stopAlarm}>\r\n        <AlarmOffIcon />\r\n      </Fab>\r\n      </Zoom>\r\n      <Fab id=\"edit\" color=\"secondary\" aria-label=\"edit\" onClick={handleEdit}>\r\n        <EditIcon />\r\n      </Fab>\r\n      <Modal\r\n        open={editing}\r\n        onClose={handleEdit}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        <TimeEditor\r\n          editing={editing}\r\n          focusing={ratio.focusing}\r\n          setEdit={setEdit}\r\n          pomodoroRatio={ratio}\r\n          setRatio={setRatio}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport Timer from \"./Timer\";\r\nimport \"./App.css\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nfunction App() {\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: '#1976d2',\r\n      },\r\n      secondary: {\r\n        main: '#69f0ae',\r\n      },\r\n    },\r\n  });\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={theme}>\r\n        <Timer></Timer>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}